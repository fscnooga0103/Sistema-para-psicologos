#!/usr/bin/env python3
"""
Focused Anamnesis Testing Script
Tests specifically the anamnesis (clinical history) functionality as requested by the user.
"""

import requests
import json
from datetime import datetime

class AnamnesisSpecificTester:
    def __init__(self, base_url="https://mindtrack-pro.preview.emergentagent.com"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.token = None
        self.user_data = None
        self.existing_patients = []

    def login(self, email="admin@psychologyportal.com", password="admin123"):
        """Login and get authentication token"""
        print("üîê Logging in...")
        url = f"{self.api_url}/auth/login"
        data = {"email": email, "password": password}
        
        try:
            response = requests.post(url, json=data, timeout=10)
            if response.status_code == 200:
                result = response.json()
                self.token = result['access_token']
                self.user_data = result.get('user', {})
                print(f"‚úÖ Login successful as: {self.user_data.get('full_name', 'Unknown')}")
                print(f"   Role: {self.user_data.get('role', 'Unknown')}")
                return True
            else:
                print(f"‚ùå Login failed: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Login error: {str(e)}")
            return False

    def get_existing_patients(self):
        """Get list of existing patients"""
        print("\nüë• Getting existing patients...")
        url = f"{self.api_url}/patients"
        headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                self.existing_patients = response.json()
                print(f"‚úÖ Found {len(self.existing_patients)} existing patients:")
                for i, patient in enumerate(self.existing_patients[:5]):  # Show first 5
                    print(f"   {i+1}. {patient.get('first_name', '')} {patient.get('last_name', '')} (ID: {patient.get('id', '')})")
                return True
            else:
                print(f"‚ùå Failed to get patients: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Error getting patients: {str(e)}")
            return False

    def create_comprehensive_anamnesis(self, patient_id, patient_name="Paciente de Prueba"):
        """Create a comprehensive anamnesis with realistic psychology data"""
        print(f"\nüìã Creating comprehensive anamnesis for patient {patient_id}...")
        
        # Comprehensive anamnesis data with realistic psychology practice information
        anamnesis_data = {
            "general_data": {
                "patient_name": patient_name,
                "birth_date": "2010-03-15",
                "birth_place": "Lima, Per√∫",
                "age_years": 14,
                "age_months": 5,
                "education_level": "Secundaria - 2do a√±o",
                "informants": ["Madre - Mar√≠a Gonz√°lez", "Padre - Carlos P√©rez"],
                "father_data": {
                    "name": "Carlos P√©rez",
                    "age": "45",
                    "education": "Universitaria completa",
                    "occupation": "Ingeniero de sistemas",
                    "civil_status": "Casado"
                },
                "mother_data": {
                    "name": "Mar√≠a Gonz√°lez",
                    "age": "42",
                    "education": "Universitaria completa",
                    "occupation": "Profesora de primaria",
                    "civil_status": "Casada"
                },
                "siblings_data": [
                    {
                        "name": "Ana P√©rez",
                        "age": "10",
                        "relationship": "Hermana menor",
                        "education": "Primaria - 5to grado"
                    }
                ]
            },
            "consultation_motive": {
                "difficulty_presentation": "Dificultades de concentraci√≥n y atenci√≥n en el √°mbito escolar, reportadas por profesores hace aproximadamente 8 meses. Presenta bajo rendimiento acad√©mico especialmente en matem√°ticas y ciencias.",
                "when_where_who": "Las dificultades se manifiestan principalmente en el colegio durante las clases que requieren mayor concentraci√≥n. Los profesores reportan que se distrae f√°cilmente y no completa las tareas asignadas.",
                "evolution": "El problema ha ido empeorando gradualmente. Inicialmente solo se presentaba en matem√°ticas, pero ahora se extiende a otras materias. Los padres tambi√©n notan dificultades en casa para hacer tareas.",
                "solutions_attempted": "Los padres han intentado: cambio de rutina de estudio, refuerzo escolar con profesora particular, reducci√≥n de tiempo de pantalla, establecimiento de horarios m√°s estrictos.",
                "perceived_cause": "Los padres sospechan posible d√©ficit de atenci√≥n. Tambi√©n consideran que el estr√©s por cambio de colegio y problemas familiares temporales pueden haber influido.",
                "treatments_received": "No ha recibido tratamiento psicol√≥gico ni psiqui√°trico previo. Solo apoyo pedag√≥gico.",
                "current_illness": {
                    "syndrome_time_years": "0",
                    "syndrome_time_months": "8",
                    "syndrome_time_days": "15",
                    "onset_type": "Insidioso y progresivo",
                    "main_symptoms": "Falta de concentraci√≥n, distracci√≥n f√°cil, olvidos frecuentes, dificultad para completar tareas, inquietud motora leve",
                    "important_stressors": "Cambio de colegio hace 10 meses, separaci√≥n temporal de los padres (3 meses), nacimiento de prima cercana",
                    "pharmacological_treatments": "Ninguno"
                }
            },
            "evolutionary_history": {
                "prenatal": {
                    "pregnancy_number": "Primera gestaci√≥n",
                    "pregnancy_conditions": "Embarazo normal sin complicaciones",
                    "planned_desired": "Embarazo planificado y deseado por ambos padres",
                    "control_type": "Control m√©dico privado mensual",
                    "diseases_difficulties": "N√°useas leves en primer trimestre, sin otras complicaciones",
                    "medications_xrays": "Vitaminas prenatales, √°cido f√≥lico. No rayos X",
                    "alcohol_tobacco_drugs": "No consumo de alcohol, tabaco ni drogas",
                    "losses": "No p√©rdidas previas"
                },
                "perinatal": {
                    "birth_time": "39 semanas y 4 d√≠as",
                    "attended_by": "M√©dico obstetra especialista",
                    "delivery_type": "Parto vaginal normal",
                    "anesthesia": "Anestesia epidural",
                    "instruments": "No se utilizaron instrumentos",
                    "weight_height": "3.1 kg, 49 cm",
                    "cry_coloration": "Llanto inmediato, coloraci√≥n rosada normal",
                    "reanimation": "No requiri√≥ reanimaci√≥n",
                    "parents_age": {
                        "father": "31 a√±os",
                        "mother": "28 a√±os"
                    }
                },
                "postnatal": {
                    "malformations": "No se observaron malformaciones",
                    "breastfeeding": "Lactancia materna exclusiva por 6 meses",
                    "sucking_difficulties": "No present√≥ dificultades para succionar",
                    "postpartum_difficulties": "No hubo complicaciones postparto"
                }
            },
            "medical_history": {
                "current_health": "Buena salud general, sin enfermedades cr√≥nicas",
                "main_diseases": "Varicela a los 5 a√±os, gripes estacionales comunes",
                "medications": "No toma medicamentos de forma regular",
                "accidents": "Ca√≠da de bicicleta a los 8 a√±os con raspones menores, sin fracturas",
                "operations": {
                    "performed": "No",
                    "which": "",
                    "why": ""
                },
                "exams": {
                    "performed": "S√≠",
                    "results": "Ex√°menes de rutina anuales normales. √öltima evaluaci√≥n oftalmol√≥gica normal."
                }
            },
            "neuromuscular_development": {
                "motor_milestones": {
                    "lift_head": "2 meses",
                    "sit_without_help": "6 meses",
                    "crawl": "8 meses",
                    "stand_without_help": "10 meses",
                    "walk": "12 meses",
                    "run": "18 meses",
                    "jump": "24 meses"
                },
                "difficulties": {
                    "tendency_fall": False,
                    "tendency_hit": False,
                    "clumsiness": True
                },
                "automatic_movements": {
                    "balancing": "Normal",
                    "coordination": "Ligeramente por debajo del promedio",
                    "other_movements": "Movimientos normales"
                },
                "motor_skills": {
                    "run": "Normal",
                    "jump": "Normal",
                    "stand_one_foot": "Normal",
                    "hop_one_foot": "Normal",
                    "fine_motor": "Dificultades leves con escritura"
                },
                "lateral_dominance": "Diestro establecido"
            },
            "speech_history": {
                "speech_development": {
                    "babble_age": "6 meses",
                    "first_words": "11 meses",
                    "first_words_which": "Mam√°, pap√°, agua",
                    "first_sentences": "24 meses",
                    "understanding_way": "Comprensi√≥n adecuada para la edad",
                    "speech_frequency": "Habla con frecuencia normal",
                    "pronunciation_difficulties": "Dificultades leves con 'rr' hasta los 6 a√±os"
                },
                "oral_movements": {
                    "bottle_use": "Hasta los 18 meses",
                    "pacifier_use": "Hasta los 2 a√±os",
                    "food_consumption": "Dieta variada y balanceada",
                    "eats_well": "S√≠, buen apetito",
                    "preferred_foods": "Frutas, pasta, pollo",
                    "rejected_foods": "Verduras verdes, pescado"
                }
            },
            "habits_formation": {
                "feeding": {
                    "breastfeeding_type": "Lactancia materna exclusiva",
                    "breastfeeding_duration": "6 meses exclusiva, mixta hasta 12 meses",
                    "first_teeth_age": "6 meses",
                    "solid_foods_age": "6 meses",
                    "eating_independence": "Independiente desde los 3 a√±os"
                },
                "hygiene": {
                    "urine_control_age": "2 a√±os y 6 meses",
                    "daytime_control": "Control completo diurno",
                    "nighttime_control": "Control nocturno desde los 3 a√±os",
                    "hygiene_independence": "Independiente en higiene personal"
                },
                "sleep": {
                    "duration": "9-10 horas por noche",
                    "bedtime": "21:30 horas",
                    "wake_time": "7:00 horas",
                    "medication_use": "No requiere medicaci√≥n",
                    "nocturnal_fears": "Ocasionales, relacionadas con pel√≠culas",
                    "sleep_behaviors": {
                        "talks": False,
                        "screams": False,
                        "moves": True,
                        "sweats": False,
                        "walks": False,
                        "resists_bedtime": True,
                        "nightmares": "Ocasionales"
                    }
                },
                "personal_independence": {
                    "does_errands": "S√≠, mandados simples en el barrio",
                    "home_errands": "Ayuda con tareas dom√©sticas b√°sicas",
                    "helps_at_home": "Colabora con orden de su cuarto y mesa",
                    "money_management": "Maneja dinero para compras peque√±as"
                }
            },
            "conduct": {
                "maladaptive_behaviors": {
                    "bites_nails": True,
                    "sucks_fingers": False,
                    "bites_lip": False,
                    "sweaty_hands": True,
                    "trembling_hands_legs": False,
                    "unprovoked_aggression": False,
                    "drops_things_easily": True,
                    "fidgeting": True,
                    "difficulty_sitting_still": True
                },
                "other_problems": "Dificultad para mantener atenci√≥n en tareas largas, tendencia a postergar deberes, olvida materiales escolares frecuentemente",
                "child_character": "Ni√±o sociable, cari√±oso, activo, algo impulsivo pero con buen coraz√≥n. Le gusta ayudar a otros y es emp√°tico."
            },
            "play": {
                "play_preferences": {
                    "plays_alone": "A veces, especialmente con videojuegos",
                    "why_alone": "Cuando est√° muy concentrado en algo que le interesa mucho",
                    "preferred_games": "Videojuegos de estrategia, f√∫tbol, juegos de construcci√≥n",
                    "favorite_toys": "Legos, consola de videojuegos, pelota de f√∫tbol",
                    "imaginative_play": "Le gusta crear historias con sus juguetes"
                },
                "social_play": {
                    "plays_with_others": "S√≠, disfruta jugar con amigos",
                    "leadership": "A veces toma liderazgo en juegos grupales",
                    "cooperation": "Coopera bien en juegos de equipo",
                    "conflict_resolution": "Necesita ayuda para resolver conflictos"
                }
            },
            "educational_history": {
                "initial_education": {
                    "age": "3 a√±os",
                    "institution": "Jard√≠n infantil privado",
                    "adaptation": "Adaptaci√≥n buena despu√©s de 2 semanas",
                    "difficulties": "Llanto inicial los primeros d√≠as, luego normal"
                },
                "primary_secondary": {
                    "primary_age": "6 a√±os",
                    "primary_performance": "Rendimiento bueno hasta 5to grado",
                    "secondary_age": "12 a√±os",
                    "secondary_performance": "Rendimiento irregular, especialmente en matem√°ticas",
                    "current_difficulties": "Matem√°ticas, ciencias, organizaci√≥n de tareas"
                },
                "learning_difficulties": {
                    "observed": "S√≠",
                    "since_when": "Inicio de secundaria (hace 2 a√±os)",
                    "subjects_affected": "Principalmente matem√°ticas y ciencias",
                    "actions_taken": "Refuerzo acad√©mico, cambio de metodolog√≠a de estudio"
                },
                "special_services": {
                    "received": "S√≠",
                    "logopedia": "No",
                    "reinforcement": "S√≠, clases particulares de matem√°ticas",
                    "psychological_support": "Primera vez (consulta actual)"
                }
            },
            "psychosexuality": {
                "sexual_questions_age": "7-8 a√±os",
                "information_provided": "Informaci√≥n b√°sica apropiada para la edad sobre diferencias corporales y reproducci√≥n",
                "opposite_sex_friends": True,
                "romantic_interests": "Inter√©s leve en compa√±eras de clase",
                "genital_behaviors": {
                    "present": "No",
                    "frequency": "",
                    "circumstances": ""
                }
            },
            "parental_attitudes": {
                "parental_reactions": [
                    "Preocupaci√≥n por el rendimiento acad√©mico",
                    "Apoyo y b√∫squeda de soluciones",
                    "Algo de ansiedad por el futuro acad√©mico"
                ],
                "beliefs_guilt": "Los padres se sienten algo culpables por los problemas maritales temporales y creen que pudo haber afectado al ni√±o",
                "behavioral_changes": "Han implementado m√°s estructura en casa, horarios m√°s claros, mayor supervisi√≥n de tareas",
                "punishment_use": {
                    "method": "P√©rdida de privilegios (videojuegos, salidas)",
                    "frequency": "Ocasional, cuando no cumple responsabilidades",
                    "child_reaction": "Acepta las consecuencias, a veces con resistencia inicial"
                },
                "child_behavior": {
                    "with_parents": "Cari√±oso, obediente la mayor√≠a del tiempo, ocasionalmente desafiante",
                    "with_siblings": "Protector con hermana menor, juegan bien juntos",
                    "with_friends": "Sociable, popular, buen compa√±ero",
                    "with_teachers": "Respetuoso pero distra√≠do, necesita recordatorios constantes"
                }
            },
            "family_history": {
                "psychiatric_diseases": False,
                "speech_problems": False,
                "learning_difficulties": True,
                "epilepsy_convulsions": False,
                "mental_retardation": False,
                "adhd_attention_problems": True,
                "other_conditions": [
                    "T√≠o paterno con diagn√≥stico de TDAH en la adultez",
                    "Abuela materna con ansiedad"
                ],
                "parents_character": "Padres responsables, trabajadores, algo ansiosos por el rendimiento acad√©mico del hijo",
                "couple_relationship": "Relaci√≥n estable actualmente, pasaron por per√≠odo de dificultades hace 6 meses pero est√°n en proceso de mejora"
            },
            "interview_observations": "Durante la entrevista, el adolescente se mostr√≥ colaborativo y dispuesto a conversar. Se observa inquietud motora leve (mueve las piernas, juega con las manos). Mantiene contacto visual adecuado. Presenta signos leves de ansiedad al hablar sobre el rendimiento escolar. Los padres muestran buena disposici√≥n para el tratamiento y seguimiento. Se evidencia din√°micas familiares funcionales con apoyo mutuo. El adolescente expresa motivaci√≥n para mejorar su rendimiento acad√©mico."
        }

        url = f"{self.api_url}/patients/{patient_id}/anamnesis"
        headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(url, json=anamnesis_data, headers=headers, timeout=15)
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Anamnesis created successfully!")
                print(f"   History Number: {result.get('anamnesis', {}).get('history_number', 'N/A')}")
                return True, result
            else:
                print(f"‚ùå Failed to create anamnesis: {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   Error details: {error_detail}")
                except:
                    print(f"   Error text: {response.text}")
                return False, {}
        except Exception as e:
            print(f"‚ùå Error creating anamnesis: {str(e)}")
            return False, {}

    def verify_anamnesis_saved(self, patient_id):
        """Verify that anamnesis was saved correctly in the patient"""
        print(f"\nüîç Verifying anamnesis was saved for patient {patient_id}...")
        
        # Get the patient data to verify anamnesis is included
        url = f"{self.api_url}/patients/{patient_id}"
        headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                patient_data = response.json()
                anamnesis = patient_data.get('anamnesis')
                
                if anamnesis:
                    print("‚úÖ Anamnesis found in patient data!")
                    print(f"   Creation date: {anamnesis.get('creation_date', 'N/A')}")
                    print(f"   History number: {anamnesis.get('history_number', 'N/A')}")
                    print(f"   Patient name in anamnesis: {anamnesis.get('general_data', {}).get('patient_name', 'N/A')}")
                    return True
                else:
                    print("‚ùå Anamnesis not found in patient data!")
                    return False
            else:
                print(f"‚ùå Failed to get patient data: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Error verifying anamnesis: {str(e)}")
            return False

    def get_anamnesis_directly(self, patient_id):
        """Get anamnesis directly using the anamnesis endpoint"""
        print(f"\nüìã Getting anamnesis directly for patient {patient_id}...")
        
        url = f"{self.api_url}/patients/{patient_id}/anamnesis"
        headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                result = response.json()
                anamnesis = result.get('anamnesis', {})
                print("‚úÖ Anamnesis retrieved successfully!")
                print(f"   Consultation motive: {anamnesis.get('consultation_motive', {}).get('difficulty_presentation', 'N/A')[:100]}...")
                print(f"   Interview observations: {anamnesis.get('interview_observations', 'N/A')[:100]}...")
                return True, anamnesis
            else:
                print(f"‚ùå Failed to get anamnesis: {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   Error details: {error_detail}")
                except:
                    print(f"   Error text: {response.text}")
                return False, {}
        except Exception as e:
            print(f"‚ùå Error getting anamnesis: {str(e)}")
            return False, {}

    def update_anamnesis(self, patient_id):
        """Test updating the anamnesis"""
        print(f"\n‚úèÔ∏è Testing anamnesis update for patient {patient_id}...")
        
        # Updated anamnesis data
        updated_data = {
            "general_data": {
                "patient_name": "Juan P√©rez Gonz√°lez",
                "birth_date": "2010-03-15",
                "birth_place": "Lima, Per√∫",
                "age_years": 14,
                "age_months": 6,  # Updated age
                "education_level": "Secundaria - 2do a√±o",
                "informants": ["Madre - Mar√≠a Gonz√°lez", "Padre - Carlos P√©rez", "Profesora - Ana Mart√≠nez"],  # Added informant
                "father_data": {
                    "name": "Carlos P√©rez",
                    "age": "45",
                    "education": "Universitaria completa",
                    "occupation": "Ingeniero de sistemas"
                },
                "mother_data": {
                    "name": "Mar√≠a Gonz√°lez",
                    "age": "42",
                    "education": "Universitaria completa",
                    "occupation": "Profesora de primaria"
                },
                "siblings_data": []
            },
            "consultation_motive": {
                "difficulty_presentation": "ACTUALIZADO: Dificultades de concentraci√≥n y atenci√≥n que han mejorado parcialmente con las intervenciones implementadas",
                "when_where_who": "Las dificultades persisten principalmente en matem√°ticas, pero ha mejorado en otras materias",
                "evolution": "Evoluci√≥n positiva en las √∫ltimas semanas con las estrategias implementadas",
                "solutions_attempted": "Refuerzo escolar, t√©cnicas de estudio, rutinas estructuradas - mostrando resultados positivos",
                "perceived_cause": "Combinaci√≥n de factores: posible d√©ficit de atenci√≥n leve y factores ambientales",
                "treatments_received": "Iniciando tratamiento psicol√≥gico",
                "current_illness": {
                    "syndrome_time_years": "0",
                    "syndrome_time_months": "9",  # Updated
                    "syndrome_time_days": "0",
                    "onset_type": "Insidioso",
                    "main_symptoms": "Mejora en concentraci√≥n, persisten olvidos ocasionales",
                    "important_stressors": "Situaci√≥n familiar estabilizada",
                    "pharmacological_treatments": "Ninguno"
                }
            },
            "evolutionary_history": {
                "prenatal": {
                    "pregnancy_number": "1",
                    "pregnancy_conditions": "Normal",
                    "planned_desired": "S√≠",
                    "control_type": "M√©dico privado",
                    "diseases_difficulties": "Ninguna",
                    "medications_xrays": "Vitaminas prenatales",
                    "alcohol_tobacco_drugs": "No",
                    "losses": "No"
                },
                "perinatal": {
                    "birth_time": "39 semanas",
                    "attended_by": "Obstetra",
                    "delivery_type": "Parto normal",
                    "anesthesia": "Epidural",
                    "instruments": "No",
                    "weight_height": "3.1kg, 49cm",
                    "cry_coloration": "Normal",
                    "reanimation": "No",
                    "parents_age": {"father": "31", "mother": "28"}
                },
                "postnatal": {
                    "malformations": "No",
                    "breastfeeding": "6 meses",
                    "sucking_difficulties": "No",
                    "postpartum_difficulties": "No"
                }
            },
            "medical_history": {
                "current_health": "Buena",
                "main_diseases": "Varicela a los 5 a√±os",
                "medications": "Ninguna",
                "accidents": "Ca√≠da menor a los 8 a√±os",
                "operations": {"performed": "No", "which": "", "why": ""},
                "exams": {"performed": "S√≠", "results": "Normales"}
            },
            "neuromuscular_development": {
                "motor_milestones": {
                    "lift_head": "2 meses",
                    "sit_without_help": "6 meses",
                    "crawl": "8 meses",
                    "stand_without_help": "10 meses",
                    "walk": "12 meses"
                },
                "difficulties": {
                    "tendency_fall": False,
                    "tendency_hit": False
                },
                "automatic_movements": {
                    "balancing": "Normal",
                    "other_movements": "Normal"
                },
                "motor_skills": {
                    "run": "Normal",
                    "jump": "Normal",
                    "stand_one_foot": "Normal",
                    "hop_one_foot": "Normal"
                },
                "lateral_dominance": "Diestro"
            },
            "speech_history": {
                "speech_development": {
                    "babble_age": "6 meses",
                    "first_words": "12 meses",
                    "first_words_which": "Mam√°, pap√°",
                    "understanding_way": "Buena",
                    "speech_frequency": "Normal",
                    "pronunciation_difficulties": "Ninguna actual"
                },
                "oral_movements": {
                    "bottle_use": "18 meses",
                    "food_consumption": "Variada",
                    "eats_well": "S√≠",
                    "preferred_foods": "Frutas, pasta"
                }
            },
            "habits_formation": {
                "feeding": {
                    "breastfeeding_type": "Exclusiva",
                    "breastfeeding_duration": "6 meses",
                    "first_teeth_age": "6 meses",
                    "solid_foods_age": "6 meses"
                },
                "hygiene": {
                    "urine_control_age": "2.5 a√±os",
                    "daytime_control": "Completo",
                    "nighttime_control": "Completo"
                },
                "sleep": {
                    "duration": "9 horas",
                    "medication_use": "No",
                    "nocturnal_fears": "Ocasionales",
                    "sleep_behaviors": {
                        "talks": False,
                        "screams": False,
                        "moves": True,
                        "sweats": False,
                        "walks": False,
                        "resists_bedtime": False
                    }
                },
                "personal_independence": {
                    "does_errands": "S√≠",
                    "home_errands": "Ayuda b√°sica",
                    "helps_at_home": "S√≠"
                }
            },
            "conduct": {
                "maladaptive_behaviors": {
                    "bites_nails": True,
                    "sucks_fingers": False,
                    "bites_lip": False,
                    "sweaty_hands": False,  # Improved
                    "trembling_hands_legs": False,
                    "unprovoked_aggression": False,
                    "drops_things_easily": False  # Improved
                },
                "other_problems": "Mejora significativa en concentraci√≥n",
                "child_character": "Sociable, activo, m√°s organizado, cari√±oso"
            },
            "play": {
                "play_preferences": {
                    "plays_alone": "A veces",
                    "why_alone": "Concentraci√≥n en actividades espec√≠ficas",
                    "preferred_games": "Videojuegos educativos, f√∫tbol, construcci√≥n",
                    "favorite_toys": "Legos, pelota, tablet educativa"
                }
            },
            "educational_history": {
                "initial_education": {
                    "age": "3 a√±os",
                    "adaptation": "Buena",
                    "difficulties": "Ninguna"
                },
                "primary_secondary": {
                    "age": "6 a√±os",
                    "performance": "Mejorando gradualmente",
                    "difficulties": "Matem√°ticas - en proceso de mejora"
                },
                "learning_difficulties": {
                    "observed": "S√≠, pero mejorando",
                    "since_when": "Inicio secundaria",
                    "actions_taken": "Refuerzo + apoyo psicol√≥gico"
                },
                "special_services": {
                    "received": "S√≠",
                    "logopedia": "No",
                    "reinforcement": "S√≠"
                }
            },
            "psychosexuality": {
                "sexual_questions_age": "8 a√±os",
                "information_provided": "Informaci√≥n apropiada para edad",
                "opposite_sex_friends": True,
                "genital_behaviors": {
                    "present": "No",
                    "frequency": "",
                    "circumstances": ""
                }
            },
            "parental_attitudes": {
                "parental_reactions": ["Apoyo", "Seguimiento del tratamiento", "Optimismo"],
                "beliefs_guilt": "Reducci√≥n de sentimientos de culpa",
                "behavioral_changes": "Mayor estructura y apoyo emocional",
                "punishment_use": {
                    "method": "Consecuencias l√≥gicas",
                    "frequency": "Reducida",
                    "child_reaction": "Mejor aceptaci√≥n"
                },
                "child_behavior": {
                    "with_parents": "M√°s colaborativo",
                    "with_siblings": "Relaci√≥n positiva",
                    "with_friends": "Sociable",
                    "with_others": "Respetuoso"
                }
            },
            "family_history": {
                "psychiatric_diseases": False,
                "speech_problems": False,
                "learning_difficulties": True,
                "other_conditions": ["T√≠o paterno con TDAH"],
                "parents_character": "Padres comprometidos con el tratamiento",
                "couple_relationship": "Relaci√≥n estable y mejorada"
            },
            "interview_observations": "ACTUALIZADO: El adolescente muestra mejora notable en su capacidad de atenci√≥n durante la sesi√≥n. Se observa mayor tranquilidad y confianza. Los padres reportan avances significativos en el hogar y colegio. Contin√∫a el plan de tratamiento con expectativas positivas."
        }

        url = f"{self.api_url}/patients/{patient_id}/anamnesis"
        headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.put(url, json=updated_data, headers=headers, timeout=15)
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Anamnesis updated successfully!")
                return True, result
            else:
                print(f"‚ùå Failed to update anamnesis: {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   Error details: {error_detail}")
                except:
                    print(f"   Error text: {response.text}")
                return False, {}
        except Exception as e:
            print(f"‚ùå Error updating anamnesis: {str(e)}")
            return False, {}

    def run_comprehensive_anamnesis_test(self):
        """Run the complete anamnesis test as requested"""
        print("üß† COMPREHENSIVE ANAMNESIS FUNCTIONALITY TEST")
        print("=" * 60)
        print("Testing as requested by user:")
        print("1. Login with admin@psychologyportal.com / admin123")
        print("2. Get list of existing patients")
        print("3. Create comprehensive anamnesis for existing patient")
        print("4. Verify anamnesis is saved correctly")
        print("5. Test anamnesis update functionality")
        print("=" * 60)

        # Step 1: Login
        if not self.login():
            print("‚ùå CRITICAL: Login failed - cannot continue tests")
            return False

        # Step 2: Get existing patients
        if not self.get_existing_patients():
            print("‚ùå CRITICAL: Could not get patient list - cannot continue tests")
            return False

        if not self.existing_patients:
            print("‚ùå CRITICAL: No existing patients found - cannot test anamnesis")
            return False

        # Step 3: Select first patient for testing
        test_patient = self.existing_patients[0]
        patient_id = test_patient.get('id')
        patient_name = f"{test_patient.get('first_name', '')} {test_patient.get('last_name', '')}"
        
        print(f"\nüéØ Selected patient for testing: {patient_name} (ID: {patient_id})")

        # Step 4: Create comprehensive anamnesis
        success, anamnesis_data = self.create_comprehensive_anamnesis(patient_id, patient_name)
        if not success:
            print("‚ùå CRITICAL: Failed to create anamnesis")
            return False

        # Step 5: Verify anamnesis was saved in patient
        if not self.verify_anamnesis_saved(patient_id):
            print("‚ùå CRITICAL: Anamnesis was not saved correctly in patient")
            return False

        # Step 6: Get anamnesis directly
        success, anamnesis = self.get_anamnesis_directly(patient_id)
        if not success:
            print("‚ùå CRITICAL: Could not retrieve anamnesis directly")
            return False

        # Step 7: Test anamnesis update
        success, updated_data = self.update_anamnesis(patient_id)
        if not success:
            print("‚ùå CRITICAL: Failed to update anamnesis")
            return False

        # Step 8: Verify update was applied
        success, updated_anamnesis = self.get_anamnesis_directly(patient_id)
        if success:
            if "ACTUALIZADO" in updated_anamnesis.get('interview_observations', ''):
                print("‚úÖ Anamnesis update verification successful!")
            else:
                print("‚ùå Anamnesis update was not applied correctly")
                return False

        print("\n" + "=" * 60)
        print("üéâ ALL ANAMNESIS TESTS COMPLETED SUCCESSFULLY!")
        print("‚úÖ Login: Working")
        print("‚úÖ Patient List: Working")
        print("‚úÖ Create Anamnesis: Working")
        print("‚úÖ Save Anamnesis: Working")
        print("‚úÖ Get Anamnesis: Working")
        print("‚úÖ Update Anamnesis: Working")
        print("‚úÖ Verify Updates: Working")
        print("=" * 60)
        print("\nüìã ANAMNESIS FUNCTIONALITY IS FULLY OPERATIONAL")
        print("The user-reported issue may be resolved or was a temporary problem.")
        return True

def main():
    tester = AnamnesisSpecificTester()
    success = tester.run_comprehensive_anamnesis_test()
    
    if success:
        print("\nüèÜ FINAL RESULT: ANAMNESIS SYSTEM IS WORKING CORRECTLY")
        return 0
    else:
        print("\n‚ö†Ô∏è FINAL RESULT: ANAMNESIS SYSTEM HAS ISSUES")
        return 1

if __name__ == "__main__":
    exit(main())